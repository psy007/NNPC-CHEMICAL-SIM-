<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>The Command Line Interface (CLI)</title>
<link rel="stylesheet" href="C1H_HTML.css" type="text/css">
<style type="text/css">
 p { margin-top: 0; margin-bottom: 0; }
</style>
<script language="JavaScript" src="DocToHelp.js"></script>
</head>
<body onload="d2hload()" onmousedown="d2hpopup()">
<div id=popupDiv>
<iframe onload="d2hframeload()" id=popupFrame frameborder=none scrolling=auto style="display:none">
</iframe>
</div>
<div id=ienav>
<ilayer id=nsnav>
<br>
<center>
<p class=normal><a href="s42-toc.htm" target="left">contents</a> &nbsp; <a href="s42-index.htm" target="left">index</a> &nbsp; <a href="sim42conceptualstructuretour.htm">previous</a> &nbsp; <a href="sim42commandlineinterfacetour.htm">next</a></p>
</center>
<br>
<hr noshade size=1>
</ilayer>
</div>
<p class=heading-3>The Command Line Interface (CLI)</p>
<p class=heading-3-p>&nbsp;</p>
<p class=body-text>The command line interface is the most common interface to the kernel, and provides a simple but powerful way of running simulations by the use of <i>scripts, </i><span class=emphasis>and will be used&#160;in this section to explain the conceptual structure&#160;in Sim42.</span><span class=emphasis> Note that the following figures show what is happening </span><span class=emphasis>inside</span><span class=emphasis> Sim42 and therefore we only show the S42API level and below.</span></p>
<table cellpadding=0 cellspacing=0 border=0 style="margin-left: -0.075in">
<tr>
<td valign=top style="width: 2in">
<p class=margin-note style="padding: 0in 0.075in"><img src="_s42-11.png"></p><p class=margin-note-p>&nbsp;</p>
</td>
<td valign=top style="width: 4.9in">
<p class=body-text style="padding: 0in 0.075in">A script is a set of commands to be run by the kernel. It can range from a simple flash calculation to a complete simulation</p></td>
</tr>
</table>
<p class=body-text>Note that the command line interface passes all the commands issued by the user to Sim42. The command interface then takes care of all communication details and effectively constructs the simulation.</p>
<p class=body-text>Right after the CommandInterface is created, a thermo administrator and a flowsheet are created by default. The thermo administrator loads any available and supported thermo servers or thermo providers.</p>
<table cellpadding=0 cellspacing=0 border=0 style="margin-left: -0.075in">
<tr>
<td valign=top>
<p class=margin-note style="padding: 0in 0.075in"><img src="_s42-12.png"></p><p class=margin-note-p>&nbsp;</p>
</td>
<td valign=top>
<p class=body-text style="padding: 0in 0.075in">A thermo provider or thermo server is a package responsible for all the thermophysical calculations used in a simulation. The thermo provider is also responsible for all flash calculations.</p></td>
</tr>
</table>
<p class=body-text>Therefore, by default you get the following :</p>
<p class=body-text><img src="_s42-13.jpg"></p>
<p class=body-text>&nbsp;</p>
<table cellpadding=0 cellspacing=0 border=0 style="margin-left: -0.075in">
<tr>
<td valign=top>
<p class=margin-note style="padding: 0in 0.075in"><img src="_s42-14.png"></p><p class=margin-note-p>&nbsp;</p>
</td>
<td valign=top>
<p class=body-text style="padding: 0in 0.075in">Note that the name of the flowsheet object in the command line interface is “/”. This reflects the fact that the flowsheet object is the “root” (like a root directory in the file system).</p></td>
</tr>
</table>
<p class=body-text>&nbsp;</p>
<table cellpadding=0 cellspacing=0 border=0 style="margin-left: -0.075in">
<tr>
<td valign=top>
<p class=margin-note style="padding: 0in 0.075in"><img src="_s42-15.png"></p><p class=margin-note-p>&nbsp;</p>
</td>
<td valign=top>
<p class=body-text style="padding: 0in 0.075in">Note that different interfaces just correspond to different ways to get information to the kernel. For example, if you are running the command line interface you may do something like this to instantiate a thermo case:</p>
<p class=body-text>myThermo = VirtualMaterials.Advanced_Peng-Robinson</p>
<p class=body-text>The command line interface then translates this expression to the command interface syntax, where things look like this:</p>
<p class=normal>thermoCaseObject = thermoAdmin.AddPropPkgFromName("VirtualMaterials", "myThermo", "Advanced_Peng-Robinson")</p>
<p class=normal>rootFlowsh.SetThermo(thermoCaseObject)</p>
<p class=body-text>The choice of interfaces is really a question of what type of application you are actually creating. If you were using yet another interface such as VMGSim then you would be interacting with the command interface via the command line interface commands that in turn are being generated by the VMGSim GUI.</p></td>
</tr>
</table>
<p class=body-text>&nbsp;</p>
<table cellpadding=0 cellspacing=0 border=0 style="margin-left: -0.075in">
<tr>
<td valign=top>
<p class=margin-note style="padding: 0in 0.075in"><img src="_s42-16.png"></p><p class=margin-note-p>&nbsp;</p>
</td>
<td valign=top>
<p class=body-text style="padding: 0in 0.075in">Note that the command interface also handles the processing of errors.</p></td>
</tr>
</table>
<p class=body-text>The basic objects you get by default are the <b>Thermo Admin</b> and the <b>Flowsheet</b> objects. The Thermo Admin object holds the thermodynamic and physical property calculation services, while the flowsheet is a repository of unit operations and connections. By default, Sim42 ships with a demo version of Virtual Materials as the thermodynamic calculation server.</p>
<p class=body-text>When you actually create a property package (for example Advanced Peng-Robinson) the instance of this object is called a <b>Thermo Case</b> and this thermodynamic service provider object is available to the flowsheet and all of its child unit operations.</p>
<p class=body-text>This is done by issuing a command to create a thermo case:</p>
<p class=source>thermo&nbsp;=&nbsp;VirtualMaterials.Advanced_Peng-Robinson</p>
<p class=body-text>&nbsp;</p>
<p class=body-text>Another fundamental building block in Sim42 is the <b>UnitOperation </b>object. Unit operation objects are added to the flowsheet and automatically linked to its thermo case. Note that in Sim42&#8217;s lingo, material or energy streams are also unit operations.</p>
<p class=body-text>In this example, we add a stream by issuing the command:</p>
<p class=body-text>&nbsp;</p>
<p class=source>s&nbsp;=&nbsp;Stream.Stream_Material()</p>
<p class=body-text>&nbsp;</p>
<p class=body-text>&nbsp;</p>
<p class=body-text>Going down the object tree, another fundamental Sim42 object is the <b>Port</b>. Ports are repositories of intensive properties such as pressure and temperatures and compositions, as well as extensive properties such as mass flow and energy flows. Ports continuously monitor the degrees of freedom available to them and as soon as the number of degrees of freedom are fulfilled (either by a user specification </p>
<p class=body-text><img src="_s42-17.jpg"></p>
<p class=body-text>or information propagated from other calculations down or upstream) the port places a call to the Thermo Case object and the thermodynamic state of the port is defined by performing a flash, and the physical properties of all phases are then calculated.</p>
<p class=body-text>Unit operations are constructed based on in and out material and energy ports.</p>
<p class=body-text><img src="_s42-18.jpg"></p>
<p class=body-text>Note that Sim42 <i>does not care</i> about what interface is being used to drive the simulation. This means that you can have simulations defined as Python scripts, command line interface scripts or any other way you may choose.</p>
<p></p>
</body>
</html>